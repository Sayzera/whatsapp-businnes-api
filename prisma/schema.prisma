// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema


datasource db {
  provider     = "mysql"
  url          = env("DATABASE_URL")
  relationMode = "prisma"
}

generator client {
  provider = "prisma-client-js"
}


model Companies {
  id   String @id @default(uuid())
  name   String
  companyId Int @unique
  status Boolean @default(false)
  deleted Boolean @default(false)

  users Users[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Users {
  id     String @id @default(uuid())
  userId Int 
  name   String

  status  Boolean @default(false)
  deleted Boolean @default(false)

  questions Questions[]
  phoneNumberList PhoneNumberList[]
  userActions UserActions[]
  steps UserActionSteps[]

  companyId String  
  company Companies @relation(fields: [companyId], references: [id], onDelete: Cascade)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([companyId], name: "companyId")
}


model PhoneNumberList {
  id String @id @default(uuid())
  status Boolean @default(false)
  deleted Boolean @default(false)
  phoneNumber String @unique

  userId String @default("")
  User Users @relation(fields: [userId], references: [id], onDelete: Cascade)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([userId], name: "userId")
}

enum QuestionType {
  FILE_STATUS
}

enum AnswerType {
  TEXT
}

// İşlemler
enum Actions {
  YURT_ICI_DOSYA_TAKIBI
  YURT_DISI_DOSYA_TAKIBI
  PATENT
  TASARIM
}
// İşlem Tipleri
enum ActionTypes {
  BASVURU_DOSYASI
  MARKA_ITIRAZ
}

model UserActions {
    id String @id @default(uuid())
    step Int @default(0)
    status Boolean @default(false)
    deleted Boolean @default(false)
    action Actions
    actionType ActionTypes

    steps UserActionSteps[]

    userId String @default("")
    User Users @relation(fields: [userId], references: [id], onDelete: Cascade)
     
    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt

    @@index([userId], name: "userId")

}

model UserActionSteps {
  id String @id @default(uuid())
  step Int @default(0)
  status Boolean @default(false)
  deleted Boolean @default(false)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  userId String @default("")
  User Users @relation(fields: [userId], references: [id], onDelete: Cascade)

  stepId String @default("")
  UserActions UserActions @relation(fields: [stepId], references: [id], onDelete: Cascade)

  @@index([userId], name: "userId")
  @@index([stepId], name: "stepId")

}

model Questions {
  id       String       @id @default(uuid())
  question String       @db.Text
  status   String
  type     QuestionType

  userId String @default("")
  User   Users   @relation(fields: [userId], references: [id], onDelete: Cascade)

  answers Answers[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([userId], name: "userId")
}

model Answers {
  id     String     @id @default(uuid())
  answer String
  type   AnswerType

  questionId String @default("")
  Question   Questions @relation(fields: [questionId], references: [id], onDelete: Cascade)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([questionId], name: "questionId")
}
